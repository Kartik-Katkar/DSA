Q. Combination Sum II

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30


A. 

class Solution {
public:

    void findcombination(int ind,int target,vector<int> &candidates,vector<vector<int>> &ans,vector<int> &ds){
        if(target==0)
        {
            ans.push_back(ds);
            return;
        }       

        for(int i = ind;i<candidates.size();i++)
        {
            if(i>ind && candidates[i]==candidates[i-1]) continue;
            if(candidates[i]>target)break;
            ds.push_back(candidates[i]);
            findcombination(i+1,target-candidates[i],candidates,ans,ds);
            ds.pop_back();
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> ans;
        vector<int> ds;
        findcombination(0,target,candidates,ans,ds);
        return ans;
    }
};



//Brute Force editing done to combination sum 1

// class Solution {
// public:
//     vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
//         set<vector<int>> ans;
//         vector<int> ds;
//         sort(candidates.begin(), candidates.end());

//         findcombination(0,target,candidates,ans,ds);
//         // convert set to vector and return
//          vector<vector<int>> vc(ans.begin(), ans.end());
//         return vc;
//     }

//     void findcombination(int ind,int target,vector<int> &arr,set<vector<int>> &ans,vector<int> &ds)
//     {
//         if(ind==arr.size())
//         {
//             if(target==0)
//             {
//                 ans.insert(ds);
//             }
//             return;
//         }

//         if(arr[ind]<=target)
//         {
//         ds.push_back(arr[ind]);
//         findcombination(ind+1,target-arr[ind],arr,ans,ds);
//         ds.pop_back();
//         }

//         // add this extra to avoid the TLE
//          while (ind + 1 < arr.size() && arr[ind + 1] == arr[ind]) {
//         ind++;
//     }

//         findcombination(ind+1,target,arr,ans,ds);
//     }
// };