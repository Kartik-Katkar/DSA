Q. Power of Two

Given an integer n, return true if it is a power of two. Otherwise, return false.

An integer n is a power of two, if there exists an integer x such that n == 2x.

 

Example 1:

Input: n = 1
Output: true
Explanation: 20 = 1
Example 2:

Input: n = 16
Output: true
Explanation: 24 = 16
Example 3:

Input: n = 3
Output: false
 

Constraints:

-231 <= n <= 231 - 1


A. 

class Solution {
public:
    bool isPowerOfTwo(int n) {

        //Brute Force

        // for (int i =0;i<30;i++)
        // {
        //     if(n == pow(2,i))
        //     {
        //         return true;
        //     }

        // }
        // return false;


       // Efficient Approach

        //   int ans = 1;
        //   for (int i =0;i<=30 ; i++)
        //   {
        //       if(ans == n)
        //       {
        //           return true;
        //       }
        //       if(i!=30)
        //       ans *=2;
        //   }
        //   return false;

        // Good Approach
        return n && log2(n) == trunc(log2(n));

        // Bit Manipulation

        //         If n is a power of 2:
        // n    = 8 (1000)
        // n-1  = 7 (0111)
        // ----------------
        // &    = 0 (0000)         (no set bit will be common between n and n-1)

        // If n is not a power of 2:
        // n    = 10 (1010)
        // n-1  =  9 (1001)
        // -----------------
        // &    =  8 (1000)         (atleast 1 set bit will be common between n and n-1)


        //   single line 
        // return n > 0 && !(n & (n-1));

    }
};
