Q. Min Cost Climbing Stairs

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45

A. 

// class Solution {
// public:
//     int climbStairs(int n) {
//         if(n==0) return 1;
//         if(n==1) return 1;

//         int right = climbStairs(n-1);
//         int left = climbStairs(n-2);

//         return left + right;
//     }
// };

// class Solution {
// public:
//     int climbStairs(int n) {
//         int prev = 1,prev2 = 1,cur1;
//         if(n==1) return 1;
//         if(n==2) return 2;
//         for(int i=2;i<=n;i++)
//         {
//             cur1 = prev+prev2;
//             prev = prev2;
//             prev2 = cur1;
//         }
//         return cur1;
//     }
// };

class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp(n+1,-1);
        dp[0] = 1,dp[1] = 1;
        if(n==1) return 1;
        if(n==2) return 2;
        for(int i=2;i<=n;i++)
        {
            dp[i] = dp[i-2]+dp[i-1];
        }
        return dp[n];
    }
};