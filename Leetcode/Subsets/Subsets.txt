Q. Subsets

Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

A. 

class Solution {
public:

    //using bit manipulation

    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> ans;
        
        for(int i=0;i<(1<<n);i++) // you can also write pow(2,n)
        {
            vector<int> v; // we want it to be cleared after each iteration
            for(int j = 0;j<n;j++)
            {
                if((1<<j) & i) v.push_back(nums[j]); // if the bit is set or not
            }
            ans.push_back(v);
        }
        return ans;
    }

    // using  recursion less optimal 


    // void subsets(int ind,vector<int> &ds,vector<vector<int>> &ans,vector<int> &nums){
    //     ans.push_back(ds);
    //     for(int i=ind;i<nums.size();i++)
    //     {
    //         ds.push_back(nums[i]);
    //         subsets(i+1,ds,ans,nums);
    //         ds.pop_back();
    //     }
    // }

    // vector<vector<int>> subsets(vector<int>& nums) {
    //     vector<int> ds;
    //     vector<vector<int>> ans;
        
    //     subsets(0,ds,ans,nums);
    //     return ans;
    // }
};