Q. Single Number

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.


A. 

class Solution {
public:
    int singleNumber(vector<int>& nums) {
// -----------------------------------------------------------------------------------------------
      // Bruteforce approach
      
//         set<int> st;

//         int n = nums.size();
//         for(int i =0;i<n;i++)
//         {

//             auto it = st.find(nums[i]);
//             if(it != st.end())
//             {
//                 st.erase(nums[i]);
//             }

//             else
//             {
//                 st.insert(nums[i]);
//             }
//         }

//         auto first = st.begin();
//         int k = *first;

// return k;

// ------------------------------------------------------------------------------------------------

         // Sorting approach

    //   sort(nums.begin(),nums.end());

    //   for(int i=1;i<nums.size();i+=2)
    //   {
    //       if(nums[i]!=nums[i-1])
    //       {
    //           return nums[i-1];
    //       }
          
    //   }
      
    //   return nums[nums.size()-1];

    // --------------------------------------------------------------------------------------------

//          METHOD 3 : USING BITWISE XOR OPERATOR (USING CONSTANT SPACE )
// To use this approach you first need to understand about Bitwise XOR operator.
// Most of us who have a background in physics ( highschool level ) , are aware of the LOGIC GATES.
// One of such gates is the XOR Gate :
// According to this gate , the output is true , only if both the inputs are of opposite kind .
// That is ,
// A B Y
// 0 0 0
// 0 1 1
// 1 0 1
// 1 1 0

// We apply the extended version of this gate in our bitwise XOR operator.
// If we do "a^b" , it means that we are applying the XOR gate on the 2 numbers in a bitwise fashion ( on each of the corresponding bits of the numbers).
// Similarly , if we observe ,

// A^A=0
// A^B^A=B
// (A^A^B) = (B^A^A) = (A^B^A) = B This shows that position doesn't matter.
// Similarly , if we see , a^a^a......... (even times)=0 and a^a^a........(odd times)=a

// XOR operator = ^

     int a = 0;
     for (int i=0;i<nums.size();i++)
     {
          a^= nums[i];
     }
    return a;
    }
};
